@using System.ComponentModel.DataAnnotations;
@using Newtonsoft.Json;
@using Newtonsoft.Json.Linq;
@using SolarHomeAuto.Domain.Account.Models;
@using SolarHomeAuto.Domain.ServerApi.Models;
@inject IAccountPageService Service
@inject NavigationManager NavigationManager

<EditForm Model="@model" OnValidSubmit="HandleSubmit">
    <CustomValidation @ref="customValidation" />
    <DataAnnotationsValidator />
    <JsonField Label="Credentials" @bind-Value="model.Credentials" ValidationFor="@(() => model.Credentials)" Id="Credentials" />
    <ProcessButton ButtonLabel="Save" @ref="submitButton" OnFormSubmit="Submit" />
</EditForm>

@code
{
    private AccountModel model = new AccountModel();

    private ProcessButton submitButton;

    private CustomValidation customValidation;
    private EditContext editContext;

    private async Task HandleSubmit()
    {
        customValidation?.ClearErrors();

        if (editContext.Validate())
        {
            var errors = new Dictionary<string, List<string>>();

            try
            {
                JsonConvert.DeserializeObject(model.Credentials);
            }
            catch
            {
                errors.Add(nameof(model.Credentials), new List<string> { "Invalid format" });
            }

            if (errors.Any())
            {
                customValidation.DisplayErrors(errors);
            }
            else
            {
                await submitButton.RunSubmitForm();
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        editContext = new EditContext(model);

        var creds = await Service.GetServiceCredentials();

        model = new AccountModel
        {
            Credentials = creds
        };
    }

    private async Task Submit()
    {
        await Service.SaveServiceCredentials(model.Credentials);
    }

    class AccountModel
    {
        public string Credentials { get; set; }
    }
}