@using SolarHomeAuto.Domain
@using SolarHomeAuto.Domain.Devices.Schedule;
@using SolarHomeAuto.Domain.Logging.Models;
@using SolarHomeAuto.Domain.RemoteCommands;
@using SolarHomeAuto.Domain.ScheduledJobs;
@using SolarHomeAuto.Domain.SolarExcess;
@using SolarHomeAuto.UI.Models;
@using SolarHomeAuto.Domain.Monitoring;

@inject IDataPageService Service

<PageTopTitle Title="Remote Commands"></PageTopTitle>

<div class="logs-results">
    
@if (!Messages.Any())
{
    <p class="text-center">
        There are no remote command messages to show.
    </p>
}
else
{
    <Pager OnPage="FetchPage" State="Pager" RecordsDisplayName="messages"></Pager>

        @foreach (var message in Messages)
        {
            <table class="table table-fixed logs-table">
                <tbody>
                    <tr class="table-active">
                        <th>Date</th>
                        <td>@message.Date.UtcToLocalLong()</td>
                    </tr>
                    <tr>
                        <th>Type</th>
                        <td>@message.Type</td>
                    </tr>
                    <tr>
                        <th>Source</th>
                        <td>@message.Source</td>
                    </tr>
                    @if (!string.IsNullOrWhiteSpace(message.RelatedId))
                    {
                        <tr>
                            <th>Related ID</th>
                            <td>@message.RelatedId</td>
                        </tr>
                    }
                    @if (!string.IsNullOrWhiteSpace(message.Data))
                    {
                        <tr>
                            <th>Related ID</th>
                            <td>@message.Data</td>
                        </tr>
                    }
                    <tr>
                        <th>Consumed</th>
                        <td>@message.Consumed</td>
                    </tr>
                    @if (!string.IsNullOrWhiteSpace(message.ConsumedResult))
                    {
                        <tr>
                            <th>Consumed data</th>
                            <td>@message.ConsumedResult</td>
                        </tr>
                    }
                </tbody>
            </table>
        }

        <Pager OnPage="FetchPage" State="Pager" RecordsDisplayName="messages"></Pager>
}
</div>
@code {
    private List<RemoteCommandMessage> Messages { get; set; } = new List<RemoteCommandMessage>();

    private bool MonitoringOnly { get; set; } = true;

    private async Task MonitoringOnlyToggle(bool selected)
    {
        MonitoringOnly = selected;

        await Refresh();
    }

    private PagerState Pager { get; set; } = new PagerState();

    private async Task FetchPage(PagerFetchParams fetch)
    {
        var filter = new RemoteCommandMessageFilter
        {
            NewestFirst = true,
            Skip = fetch.Skip,
            Take = fetch.Take
        };

        Messages = await Service.GetRemoteCommandMessages(filter);

        Pager.Update(fetch, Messages.Count);
    }

    private Task Refresh()
    {
        return FetchPage(new PagerFetchParams());
    }

    protected override Task OnInitializedAsync()
    {
        return Refresh();
    }
}