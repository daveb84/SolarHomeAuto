// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SolarHomeAuto.Infrastructure.DataStore.Sqlite;

#nullable disable

namespace SolarHomeAuto.Infrastructure.DataStore.Sqlite.Migrations
{
    [DbContext(typeof(SqliteDbContext))]
    [Migration("20230731223230_StateChange")]
    partial class StateChange
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.5");

            modelBuilder.Entity("SolarHomeAuto.Infrastructure.DataStore.Entities.ApplicationStateEntity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsBackgroundServiceRunning")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("ApplicationState", (string)null);
                });

            modelBuilder.Entity("SolarHomeAuto.Infrastructure.DataStore.Entities.AuthTokenEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AccessToken")
                        .HasColumnType("TEXT");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("TEXT");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("AuthToken", (string)null);
                });

            modelBuilder.Entity("SolarHomeAuto.Infrastructure.DataStore.Entities.DeviceEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DeviceId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Enabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("StateType")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DeviceId" }, "IX_Device_DeviceId");

                    b.ToTable("Devices", (string)null);
                });

            modelBuilder.Entity("SolarHomeAuto.Infrastructure.DataStore.Entities.DeviceHistoryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeviceId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Error")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsStateChange")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Source")
                        .HasColumnType("TEXT");

                    b.Property<string>("State")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Date" }, "IX_DeviceHistory_Date");

                    b.HasIndex(new[] { "DeviceId" }, "IX_DeviceHistory_DeviceId");

                    b.ToTable("DeviceHistory", (string)null);
                });

            modelBuilder.Entity("SolarHomeAuto.Infrastructure.DataStore.Entities.LogEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Exception")
                        .HasColumnType("TEXT");

                    b.Property<string>("IpAddress")
                        .HasColumnType("TEXT");

                    b.Property<int>("Level")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Logger")
                        .HasColumnType("TEXT");

                    b.Property<string>("Message")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Log", (string)null);
                });

            modelBuilder.Entity("SolarHomeAuto.Infrastructure.DataStore.Entities.SolarExcessJobEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DelaySeconds")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DeviceId")
                        .HasColumnType("TEXT");

                    b.Property<string>("JobId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TurnOffGridPurchaseDuration")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TurnOffGridPurchaseGreaterThan")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TurnOffProductionDuration")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TurnOffProductionLessThan")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TurnOffTurnedOnAtLeastDuration")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TurnOnBatteryMinPercent")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TurnOnGridFeedInDuration")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TurnOnGridFeedInGreaterThan")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TurnOnProductionDuration")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TurnOnProductionGreaterThan")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TurnOnTurnedOffAtLeastDuration")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "JobId" }, "IX_SolarExcessJob_JobId")
                        .IsUnique();

                    b.ToTable("SolarExcessJobs", (string)null);
                });

            modelBuilder.Entity("SolarHomeAuto.Infrastructure.DataStore.Entities.SolarRealTimeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("BatteryCapacity")
                        .HasColumnType("TEXT");

                    b.Property<bool>("BatteryCharging")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("BatteryPower")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Consumption")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("GridPower")
                        .HasColumnType("TEXT");

                    b.Property<bool>("GridPurchasing")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("Production")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Date" }, "IX_SolarRealTime_Date");

                    b.ToTable("SolarRealTime", (string)null);
                });

            modelBuilder.Entity("SolarHomeAuto.Infrastructure.DataStore.Entities.SolarStatsEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("ChargeCapacity")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Consumption")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("DischargeCapacity")
                        .HasColumnType("TEXT");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Generation")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("GridFeedIn")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("GridPurchase")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Date" }, "IX_SolarStats_Date");

                    b.ToTable("SolarStats", (string)null);
                });
#pragma warning restore 612, 618
        }
    }
}
